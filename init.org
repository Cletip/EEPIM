#+title: Configuration file
#+auto_tangle: t

todo :
- police fira mono
- all-the-icons-install-fonts ? comment faire ?

* Introduction

** How this file works
:PROPERTIES:
:ID:       c4f1d90a-3afd-4884-af24-8134fb163535
:END:

This file is provided with the git repository: any updates (see the readme for update instructions) will reset this file as intended. Therefore, modifying it is pointless. However, to customize it, see [[id:c9bd19aa-b1c5-4d96-b4d9-1fb09aaedae8][How to modify the configuration]].

*** Basic Code Block

This is a basic example of a code block in Org mode. Code blocks are enclosed in "#+begin_src" and "#+end_src" tags. The language of the code block (e.g., emacs-lisp) is specified right after "#+begin_src".

#+begin_src emacs-lisp
  ;; Simple function definition in Emacs Lisp
    (message "Hello, world!")
#+end_src

This block does not interact with any external files or parts of the document. It's simply an isolated snippet of code that you can run within Org mode. Do C-c C-c when you are in this block !

Bonus for programmer : this can work with any type of language (":results output" will print the result of the console, and not the return value)

#+begin_src python :results output

print("Hello word")

#+end_src

*** Tangling Code Block

The following code block has a ":tangle yes" directive. This tells Org mode to include this code in a source file when the document is tangled. Tangling is the process of extracting code blocks into a standalone script or source file, which can be executed outside of Emacs.

#+begin_src emacs-lisp :tangle yes
  ;; the code in this code block and ALL code block with ":tangle yes" will be exported
#+end_src

By tangling, you can maintain your source code within an Org document but still produce executable scripts, making your documentation and code management more integrated and fluid (like this config file).

*** Noweb Reference Definition Block

This block defines a ":noweb-ref" called "test". The ":noweb-ref" is a marker that allows this block of code to be referenced by name in other parts of the document.

#+begin_src emacs-lisp :noweb-ref test
  ;; Code that can be reused in other blocks
  (defun repeat-message (message)
    (dotimes (i 3)
      (message message)))
#+end_src

You can think of ":noweb-ref" as creating a reusable code snippet that can be inserted into other code blocks using the "noweb" syntax.

*** Using Noweb to Insert Code

The ":noweb yes" directive allows the inclusion of code from a ":noweb-ref block". This means that the "<<test>>" here is replaced by the content of the "test" block defined earlier.
Don't forget the ":tangle yes" if you want to export the code too (not the case here) !

#+begin_src emacs-lisp :noweb yes
    ;; Here we insert all the ":noweb-ref test" block
    <<test>>

    ;; Additional code can be added here too
    (repeat-message "Hello again!")
#+end_src

This feature is powerful for literate programming because it lets you define code in chunks that can be explained in context and reused throughout the document.

*** Summary

Remember, any change to a block with ":tangle" or ":noweb-ref" has broader implications for your document's behavior and the output files. It's essential to manage these carefully, especially in a collaborative environment where the document might be sourced from a version-controlled repository.

* Configuration of Emacs and his world

** Basic things essential

*** Startup Page

Here is the code allowing to start with the Tutorial.

#+begin_src emacs-lisp :tangle yes

  (defun open-my-startup-file ()
    "Open a specific file and maximize the Emacs window on startup."
    (find-file (concat user-emacs-directory "PKM/notes/" "tutorial.org"))  ; Change the path to your specific file
    (delete-other-windows))

  ;; Add the custom startup function to the Emacs startup hook
  (add-hook 'emacs-startup-hook 'open-my-startup-file)

#+end_src

*** Package Manager

#+begin_src emacs-lisp :tangle early-init.el

  ;; Disable package.el in favor of straight.el
  (setq package-enable-at-startup nil)

#+end_src

#+begin_src emacs-lisp  :tangle yes

;; Install straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

#+end_src

*** Use-package

#+begin_src emacs-lisp :tangle yes

  ;; Install use-package
  (when (version< emacs-version "29")
    (straight-use-package 'use-package))

  ;; always download package automatically (without :ensure t)
  (setq use-package-always-ensure t)

  ;; Configure use-package to use straight.el by default
  (setq straight-use-package-by-default t)

#+end_src

*** Keep .emacs.d clean

#+begin_src emacs-lisp :tangle yes 

  (use-package no-littering
	       :init
	       (require 'no-littering)
	       )

#+end_src

*** Variable of the PKM

#+begin_src emacs-lisp :tangle yes 

  (defgroup eepkm nil
    "Customization group for EasyEmacsPKM"
    :group 'main-group  ; Inherits from main-group
    :prefix "eepkm-"
    )


#+end_src

*** Encodings

#+begin_src emacs-lisp :tangle yes

;;; Encodings
;; Contrary to what many Emacs users have in their configs, you don't need more
;; than this to make UTF-8 the default coding system:
(set-language-environment "UTF-8")
;; ...but `set-language-environment' also sets `default-input-method', which is
;; a step too opinionated.
(setq default-input-method nil)
;; ...And the clipboard on Windows could be in a wider encoding (UTF-16), so
;; leave Emacs to its own devices.
(when (memq system-type '(cygwin windows-nt ms-dos))
  (setq selection-coding-system 'utf-8))

#+end_src


*** Leave with Escape key

To replace the classic "C-g".

#+begin_src emacs-lisp :tangle yes 

  ;; make esc key do cancel. works only in gui emacs
  (define-key key-translation-map (kbd "<escape>") (kbd "C-g"))
  ;; the first don't work with all the time
  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))


#+end_src


** Text

*** Aesthetics

**** Wraps lines

visual-line-mode is a display mode in Emacs that wraps lines of text at the edge of the window. This mode is particularly useful for reading and editing long paragraphs of text because it allows the lines to break naturally at word boundaries without inserting hard newline characters into the text.

#+begin_src emacs-lisp :tangle yes

  ;; visuellement
  (global-visual-line-mode 1)

#+end_src

**** Fill mode

(auto-fill-mode 1)
fill-column

*** Smart parens

#+begin_src emacs-lisp :tangle yes 

(use-package smartparens
    :hook (org-mode . smartparens-mode)
    :config
    (sp-pair "\«" "\»")  
    ;; the second argument is the closing delimiter, so you need to skip it with nil
    (sp-pair "'" nil :actions :rem)  
    (sp-local-pair 'org-mode "*" "*") ;; adds * as a local pair in org mode
    (sp-local-pair 'org-mode "=" "=") ;; adds = as a local pair in org mode
    (sp-local-pair 'org-mode "\/" "\/")
    )

#+end_src


*** Auto save

#+begin_src emacs-lisp :tangle yes 

  (auto-save-visited-mode 1)
  (setq auto-save-visited-interval 10) ; every X seconds


#+end_src

*** Normal copy and past shortcut

CUA Mode is a feature in Emacs that configures the keybindings to emulate the Common User Access (CUA) standard used in many other programs, particularly those in the Windows environment. This mode makes cut, copy, paste, and other common operations accessible through the familiar Ctrl-X, Ctrl-C, Ctrl-V, and Ctrl-Z shortcuts.

#+begin_src emacs-lisp :tangle yes 

(cua-mode 1)

#+end_src


*** Replace text when copy and past

** Aesthetics

*** Mode line

#+begin_src emacs-lisp :tangle yes 

  (use-package doom-modeline
	       :init
	       (doom-modeline-mode)
	       :custom    
	       (doom-modeline-height 25)
	       (doom-modeline-bar-width 1)
	       (doom-modeline-icon t)
	       (doom-modeline-major-mode-icon t)
	       (doom-modeline-major-mode-color-icon t)
	       (doom-modeline-buffer-file-name-style 'truncate-upto-project)
	       (doom-modeline-buffer-state-icon t)
	       (doom-modeline-buffer-modification-icon t)
	       (doom-modeline-minor-modes nil)
	       (doom-modeline-enable-word-count t)
	       (doom-modeline-buffer-encoding nil)
	       (doom-modeline-indent-info nil)
	       (doom-modeline-checker-simple-format t)
	       (doom-modeline-vcs-max-length 20)
	       (doom-modeline-env-version t)
	       (doom-modeline-irc-stylize 'identity)
	       (doom-modeline-github-timer nil)
	       (doom-modeline-gnus-timer nil)
	       )

#+end_src

*** Icons

#+begin_src emacs-lisp :tangle yes 

  (use-package all-the-icons-dired)

  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

#+end_src

*** Scroll bar

:tangle yes 
#+begin_src emacs-lisp

  (scroll-bar-mode 0)

  (use-package better-scroll-bar
	       :straight
	       (:host github :repo "jcs-elpa/better-scroll-bar")
	       :init
	       (define-key global-map (kbd "<prior>") #'better-scroll-down)
	       (define-key global-map (kbd "<next>") #'better-scroll-up)

	       (define-key global-map (kbd "S-<prior>") #'better-scroll-down-other-window)
	       (define-key global-map (kbd "S-<next>") #'better-scroll-up-other-window)
	       )

  (use-package auto-scroll-bar
	       :straight
	       (:host github :repo "jcs-elpa/auto-scroll-bar")
	       :init
	       (auto-scroll-bar-mode 1)
	       )

#+end_src

*** Cursor

**** View where is the cursor

Not very useful.

#+begin_src emacs-lisp

  (use-package beacon
      :config
      (setq beacon-blink-delay 0.0)
      (setq beacon-blink-duration 0.5)
      (setq beacon-size 60)
      ;; (setq beacon-color "#ffa38f")
      (setq beacon-color "blue")
      (beacon-mode 1)
      )

#+end_src

**** Indication in the modeline

#+begin_src emacs-lisp :tangle yes 

  (use-package nyan-mode
      :init (nyan-mode)
      )

#+end_src

*** Theme

#+begin_src emacs-lisp :tangle yes 

  (use-package doom-themes
	       :config
	       ;; (load-theme 'doom-moonlight t)
	       (load-theme 'leuven t)
	       )

#+end_src

*** Buffer

**** Light active buffer

Not very useful.

#+begin_src emacs-lisp

(use-package dimmer
    :custom
    (dimmer-fraction 0.3)
    (dimmer-exclusion-regexp-list
     '(".*Minibuf.*"
       ".*which-key.*"
       ".*LV.*"))
    :config
    (dimmer-mode 1)
    )

#+end_src

** Human-machine interface

*** Interface for shortcut / keybinding

#+begin_src emacs-lisp :tangle yes :noweb yes 

  (use-package hydra)

  (use-package pretty-hydra
	       :init
	       <<pretty-hydra-init>>
	       )

  (defgroup eepkm-bindings nil
    "Customization subgroup for key bindings"
    :group 'eepkm  
    )

#+end_src

**** Menu
:PROPERTIES:
:ID:       4be934ad-9e75-4b45-a0b1-adb6d26a8632
:END:

***** Code of the menu

Binding :

#+begin_src emacs-lisp :tangle yes

  (defcustom eepkm-bindings-menu "<f11>"
    ;; (kbd "<escape>")
    ;; (kbd "C-c h")
    "Key for `org-roam-node-find` in the eepkm-bindings PKM section."
    :type 'string
    :group 'eepkm-bindings)

  (global-set-key (kbd eepkm-bindings-menu) 'eepkm-bindings/body)

#+end_src

Code :

For instance, if you try to insert a keybinding from a variable directly into the pretty-hydra-define macro, the variable name itself is inserted rather than its value. This means that instead of creating a keybinding that reflects the current value of a variable, the hydra would literally try to use the variable's name as the key, which is not the intended behavior.

This code resolve this issue, a evaluation of the code that have the variable evaluated.

#+begin_src emacs-lisp :tangle yes

  ;; hydra-keyboard-quit
  (eval
   `(pretty-hydra-define eepkm-bindings
      (:title "Main Commands of the PKM" :color amaranth :quit-key "ESC" :exit t)
      ("PKM"
       ((,eepkm-bindings-find-node-key org-roam-node-find "Find and go to a node")
	(,eepkm-bindings-insert-node-key org-roam-node-insert "Find and insert a link to a node")
	(,eepkm-bindings-attach-key org-attach "Attach a document to the heading"))
       "Note"
       ((,eepkm-bindings-note-new-heading-key org-meta-return "Insert new heading or list")
	(,eepkm-bindings-note-todo-key org-todo "Mark a heading as TODO")
	(,eepkm-bindings-note-export-key org-export-dispatch "Export to another format")
	(,eepkm-bindings-note-store-link-key org-store-link "Store the link under the cursor")
	(,eepkm-bindings-note-insert-link-key org-insert-link "Insert a link"))
       "Window"
       ((,eepkm-bindings-window-split-horizontally-key split-window-below "Split your window horizontally")
	(,eepkm-bindings-window-split-vertically-key split-window-right "Split your window vertically")
	(,eepkm-bindings-window-next-window-key next-window "Next window")
	(,eepkm-bindings-window-previous-window-key previous-window "Previous window")
	(,eepkm-bindings-window-winner-undo-key winner-undo "Undo previous configuration of window(s)")
	(,eepkm-bindings-window-winner-redo-key winner-redo "Redo previous configuration of window(s)")
	(,eepkm-bindings-window-delete-other-windows-key delete-other-windows "Keep only the current window")
	(,eepkm-bindings-window-delete-window-key delete-window "Delete current window")))))

#+end_src

***** Variable of bindings

This is useful because the user will be able to change the place of the bindings just with the custom-menu.

#+begin_src emacs-lisp :noweb-ref pretty-hydra-init

  ;; Customizable key bindings for PKM section
  (defcustom eepkm-bindings-find-node-key "f"
    "Key for `org-roam-node-find` in the eepkm-bindings PKM section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-insert-node-key "i"
    "Key for `org-roam-node-insert` in the eepkm-bindings PKM section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-attach-key "a"
    "Key for `org-attach` in the eepkm-bindings PKM section."
    :type 'string
    :group 'eepkm-bindings)

  ;; Customizable key bindings for Note section
  (defcustom eepkm-bindings-note-new-heading-key "h"
    "Key for `org-meta-return` in the eepkm-bindings Note section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-note-todo-key "t"
    "Key for `org-todo` in the eepkm-bindings Note section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-note-export-key "e"
    "Key for `org-export-dispatch` in the eepkm-bindings Note section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-note-store-link-key "l"
    "Key for `org-store-link` in the eepkm-bindings Note section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-note-insert-link-key "m"
    "Key for `org-insert-link` in the eepkm-bindings Note section."
    :type 'string
    :group 'eepkm-bindings)

  ;; Customizable key bindings for Window section
  (defcustom eepkm-bindings-window-split-horizontally-key "h"
    "Key for `split-window-below` in the eepkm-bindings Window section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-window-split-vertically-key "v"
    "Key for `split-window-right` in the eepkm-bindings Window section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-window-next-window-key "n"
    "Key for `next-window` in the eepkm-bindings Window section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-window-previous-window-key "p"
    "Key for `previous-window` in the eepkm-bindings Window section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-window-winner-undo-key "w"
    "Key for `winner-undo` in the eepkm-bindings Window section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-window-winner-redo-key "x"
    "Key for `winner-redo` in the eepkm-bindings Window section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-window-delete-other-windows-key "k"
    "Key for `delete-other-windows` in the eepkm-bindings Window section."
    :type 'string
    :group 'eepkm-bindings)

  (defcustom eepkm-bindings-window-delete-window-key "d"
    "Key for `delete-window` in the eepkm-bindings Window section."
    :type 'string
    :group 'eepkm-bindings)


#+end_src

*** See the next key

#+begin_src emacs-lisp :tangle yes

  (use-package which-key
	       :init
	       (which-key-mode)
	       :config
	       (setq which-key-idle-delay 0.5)  ; Adjust to the desired delay in seconds before which-key pops up
	       (setq which-key-popup-type 'side-window)  ; Display in side window by default
	       (setq which-key-side-window-location 'bottom)  ; Display at the bottom of the screen
	       (setq which-key-side-window-max-width 0.33)  ; Use a third of the screen width for which-key window
	       (setq which-key-side-window-max-height 0.25)  ; Use a quarter of the screen height for which-key window
	       (which-key-setup-side-window-bottom)  ; Setup to display at the bottom
	       )


#+end_src

*** Completion Framework

#+begin_src emacs-lisp :tangle yes

  ;; vertical completion
  (use-package vertico
	       :init
	       (vertico-mode 1)
	       :custom
	       (vertico-cycle t)
	       ;; :custom-face
	       ;; (vertico-current ((t (:background "#3a3f5a"))))
	       )

  ;; annotation in the minibuffer
  (use-package marginalia
	       :init
	       (marginalia-mode 1)
	       :custom
	       (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
	       )

  ;; Use the `orderless' completion style.
  ;; Use space-separated search terms in any order when completing with Icomplete or the default interface.
  ;; Example : M-x consult-line, write "use ordeless", and you will find the configuration of the package orderless !
  (use-package orderless
	       :init
	       ;; Enable `partial-completion' for files to allow path expansion.
	       ;; You may prefer to use `initials' instead of `partial-completion'.
	       (setq completion-styles '(orderless)
		     completion-category-defaults nil
		     completion-category-overrides '((file (styles partial-completion)))))

  ;; better searching 
  (use-package consult
	       :config
	       ;; Replace bindings with Consult commands
	       (global-set-key (kbd "C-s") 'consult-line)
	       (global-set-key (kbd "C-x b") 'consult-buffer)
	       (global-set-key (kbd "M-y") 'consult-yank-pop)
	       (global-set-key [remap switch-to-buffer] 'consult-buffer)
	       (global-set-key [remap switch-to-buffer-other-window] 'consult-buffer-other-window)
	       (global-set-key [remap switch-to-buffer-other-frame] 'consult-buffer-other-frame))

#+end_src


*** Back to the previous window configuration

#+begin_src emacs-lisp :tangle yes 

  (winner-mode 1)

#+end_src



** Org and family

*** Org

#+begin_src emacs-lisp :tangle yes

  (use-package org :straight (org :type git :repo "https://code.orgmode.org/bzg/org-mode.git")
	       :config
	       (setq org-directory (concat user-emacs-directory "PKM/notes/"))
	       )

#+end_src

**** Exportation

#+begin_src emacs-lisp :tangle yes 

  (defun my/org-export-output-dir (orig-fun &rest args)
    "Modification of the export-output directory for Org-mode."
    (let ((old-default-directory default-directory))
      ;; Change working directory temporarily to 'export' directory.
      (setq default-directory (expand-file-name "PKM/data/export/" user-emacs-directory))
      (apply orig-fun args)
      ;; Restores original working directory after export.
      (setq default-directory old-default-directory)))

  ;; Applies directory modification function to all Org export functions.
  (advice-add 'org-export-to-file :around #'my/org-export-output-dir)

#+end_src


**** Aesthetic

***** Global

#+begin_src emacs-lisp :tangle yes 

  ;;Pour obtenir des polices proportionnelles
  (variable-pitch-mode 1)

  ;; Make sure org-indent face is available
  (require 'org-indent)
  ;; (set-face-attribute 'org-document-title nil :font "Fira Mono" :weight 'bold :height 1.5)
  ;; (dolist (face '((org-level-1 . 1.3)
  ;;                 (org-level-2 . 1.25)
  ;;                 (org-level-3 . 1.20)
  ;;                 (org-level-4 . 1.15)
  ;;                 (org-level-5 . 1.10)
  ;;                 (org-level-6 . 1.05)
  ;;                 (org-level-7 . 1.0)
  ;;                 (org-level-8 . 1.0)))
  ;;   (set-face-attribute (car face) nil :font "Fira Mono" :weight 'medium :height (cdr face)))


  ;; ;; Ensure that 
  ;; anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;;couleur des checkbox
  (defface org-checkbox-todo-text
    '((t (:inherit org-todo)))
    "Face for the text part of an unchecked org-mode checkbox.")

  (font-lock-add-keywords
   'org-mode
   `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?: \\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-checkbox-todo-text prepend))
   'append)

  (defface org-checkbox-done-text
    '((t (:inherit org-done)))
    "Face for the text part of a checked org-mode checkbox.")

  (font-lock-add-keywords
   'org-mode
   `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-checkbox-done-text prepend))
   'append)

#+end_src


***** New symbol end of headings

#+begin_src emacs-lisp :tangle yes 

  (setq org-ellipsis "⬎")

#+end_src

***** Indentation

#+begin_src emacs-lisp :tangle yes 

  (add-hook 'org-mode-hook 'org-indent-mode)

#+end_src


**** Attach

#+begin_src emacs-lisp :tangle yes 

  (setq org-attach-dir (concat user-emacs-directory "PKM/data/org-attach"))

  ;; each attached document go to the ID of the nodes

  ;;The first function in this list defines the preferred function which will be used when creating new attachment folders.
  (setq org-attach-id-to-path-function-list
	'(cp/org-attach-id-uuid-folder-format
	  ;; org-attach-id-uuid-folder-format
	  ))

  (defun cp/org-attach-id-uuid-folder-format (id)
    "Return the path to attach a file with an id"
    (format "%s" id))


#+end_src

*** Org-roam

#+begin_src emacs-lisp :tangle yes

  (use-package org-roam
	       :init
	       (setq org-roam-directory org-directory)
	       ;;avoid nottif from version 1 to 2
	       (setq org-roam-v2-ack t)
	       :custom
	       (org-roam-completion-everywhere t) ;; to have completion everywhere
	       ;;set my log capture, not used
	       (org-roam-dailies-directory "journals/")
	       ;; what's in the backlinks buffer
	       (org-roam-mode-sections
		(list #'org-roam-backlinks-section
		      #'org-roam-reflinks-section
		      #'org-roam-unlinked-references-section
		      ))
	       :config
	       (setq org-roam-directory org-directory)
	       ;; automatic sync with files 
	       (org-roam-db-autosync-mode +1)
	       )

#+end_src


*** Org-roam-ui

#+begin_src emacs-lisp :tangle yes

(use-package org-roam-ui
    :after org-roam
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    ;; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start nil)
    )

#+end_src

*** Org-consult

#+begin_src emacs-lisp :tangle yes

(use-package consult-org-roam
   :after org-roam
   :init
   (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search))

#+end_src

** Dired

#+begin_src emacs-lisp :tangle yes 

  ;;to directly delete the buffer if a file (or directory) is deleted
  (defun my--dired-kill-before-delete (file &rest rest)
    (if-let ((buf (get-file-buffer file)))
	(kill-buffer buf)
      (dolist (dired-buf (dired-buffers-for-dir file))
	(kill-buffer dired-buf))))
  (advice-add 'dired-delete-file :before 'my--dired-kill-before-delete)



					  ; automatic refresh of dired when file is modified
  (add-hook 'dired-mode-hook 'auto-revert-mode)

  (setq dired-auto-revert-buffer t) ; ; Update dired buffer on revisit
  (setq dired-dwim-target t) ; ; If two dired buffers are open, save in the other on copy attempt
  (setq dired-hide-details-hide-symlink-targets nil) ; ; Do not hide symlink targets
  (setq dired-listing-switches "-alh") ; ; Allow dired to display all folders, in lengty format, with quantities of data in human-readable format
  (setq dired-ls-F-marks-symlinks nil) ; ; Informs dired how 'ls -lF' marks symbolic links, see help page for details
  (setq dired-recursive-copies 'always) ; ; Always recursively copies without prompting
  (setq dired-recursive-deletes 'always) ; asks for more to delete recursively
  (setq dired-dwim-target t) ; qd t-on copies, if another dired is open, copies into it "directly".

#+end_src


** Other

* How to modify the configuration
:PROPERTIES:
:ID:       c9bd19aa-b1c5-4d96-b4d9-1fb09aaedae8
:END:

[[elisp:(find-file (concat user-emacs-directory "personal.org"))][Go to personal configuration file]].

You don't have the option to create another configuration file, as the base file will always be overwritten. Therefore, I've decided to create a second configuration file where you can simply copy and paste code snippets that suit your needs !

Load the personal configuration file.

#+begin_src emacs-lisp :tangle yes

  (load (concat user-emacs-directory "personal.el"))

#+end_src

And load the personal option via customize :

#+begin_src emacs-lisp :tangle yes

    (customize-set-variable 'custom-file (no-littering-expand-etc-file-name "custom.el"))

    ;; after-init-hook ?
    (when (file-exists-p custom-file)
      (load custom-file nil 'nomessage))

  ;; (add-hook 'after-init-hook (lambda ()
  ;; 				    (if (file-exists-p custom-file)
  ;; 					(load custom-file nil 'nomessage)
  ;; 				      (message "Le fichier de configuration custom-file [%s] n'existe pas" custom-file))))

#+end_src
