:PROPERTIES:
:ID:       cd4ed5d6-c2a5-48ef-9d3a-84a1636b3e87
:END:
#+title: Main Tutorial
#+STARTUP: showall

The aim of this tutorial is to get you started as soon as possible with this "PIM", which stands for "Personal Information Manager" : make some "nodes" to create  a personal information graph that you will use all your life !

For a first-time user, the advise is to go as far as creating a node and inserting links. That's really the basics, and you don't necessarily need the rest if you don't want more.

If you are already familiar with the software Emacs, you can skip the "Introduction to Emacs" part to jump directly to the “Tutorial” section that is here for personal knowledge management.

** Introduction to Emacs
:PROPERTIES:
:ID:       00eaa9ba-3f08-459a-9713-25e255514a4f
:END:

You're using a program called "Emacs". 

Emacs is a highly expansive and versatile piece of software. Due to its broad functionality and customizable capabilities, Emacs can indeed feel overwhelming to new users. 

This introduction focus of the main information needed to use this software, but contain some links that you can click to have more informations (sometimes some "node" of the tutorial, sometimes the correct page in the manuel of Emacs (in Emacs itself !), sometimes external link…).
*You don't need to click on this link, but you can if you are curious.*

Furthermore, this introduction is designed for experimentation: don't hesitate to test what's written here.

*** Use the Menu Bar
:PROPERTIES:
:ID:       05eac3bb-c2ae-4cfc-a797-9f94604bbd71
:END:

The Menu Bar in Emacs is a horizontal bar at the top of the Emacs window that provides easy access to various features via dropdown menus. It is similar to Menu Bars in other applications, offering clickable items organized into categories such as "File", "Edit", "Options", "Buffers", and "Help".

You can interact with the Menu Bar to use Emacs.

For example, try this :

#+begin_example
File > New Window on Right.
#+end_example

Oh my god, what did you do !

You just split the "=frame=" (the total part of Emacs) in two "=windows=". Each window has a "=buffer=" : that can be a document, an image, etc. A good example of the difference between a buffer and a file is when you view the list of installed packages in Emacs : this list wasn't a file saved on your computer, it was displayed within Emacs as a buffer.
Splitting frame in two windows is very useful : for example, you can have two buffer to view two different document, or just to be in two different places in the same document.

Currently, we are in the buffer "tutorial". To switch to another buffer, just click on "Buffer" in the Menu Bar. For example, switch to the buffer "=*scratch*=". This buffer is special : he is always present, and the text inside will not be saved. It is just to try some things !

To switch to the buffer of the tutorial, do the same thing, but with "tutorial.org".

To restore the frame as before, click on the buffer of the Tutorial, and in the Menu Bar, do File > Remove Other Windows : this will keep only the window where your cursor is located.

See [[id:eb4dc11f-3725-40ec-a511-f72bec1843c2][What you see when you open Emacs]] for more information.

*** Call commands, cancel command
:PROPERTIES:
:ID:       8f7605f5-bd76-4a76-a173-f5df7ff48c83
:END:

In the menu selection described before, you can see things like "C-x 1", or "M-g a" near the description of the action. This is the keyboard shortcut (or key binding) assigned to a "functionally". All "functionalities" are =command=. 

When you interact with Emacs, *everything* is a "command". A command is a piece of code that allows you to interact with Emacs and perform various actions. These actions can range from simple tasks like moving the cursor for the next line (down arrow) or inserting text to complex operations like searching and replacing text, running programs, or interacting with external services.

As a reminder, this tutorial focuses on a set of tools to use your PIM, so you need to know how to call those commands to interact with the main program of your PIM : Emacs.

You can call commands by several ways. The first method is to use the Menu Bar as describe in the first section of this introduction, the second method in this tutorial is the shortcuts.

Special abbreviations are used for shortcuts :
- =C= stands for Ctrl. 
- =M= stands for Alt(for windows) or command (for MacOS)
- =S= stands for Shift
- "=-=" stands to press two keys in the same time

So, for example, =C-x t 2= is:

Pressing Ctrl and the letter "x" at the same time, then press the letter "t", then the number "2". This will call the command "tab-new", and that will open a new tab : you can see all the tabs opened at the top of the window : 

[[file:images/tab-bar.png]]

A "tab" is a window configuration (and buffer). You can have several tabs. Try to switch between several tabs by clicking on it.

=M-x= is a special command in Emacs, and its purpose is to call commands : this is the third method to call a command. When you call it, your cursor moves to the bottom part of the screen, prompting you to type a command name. This place is the "=Minibuffer=" in Emacs. When Emacs will ask you something, that will always be in the "=Minibuffer=", remember this name !

Let's try to hide and show the Menu Bar as an example.

Press =M-x= and type "=menu-bar-mode=", then type =RET= (or enter).
This operation is usually written as :
=M-x menu-bar-mode=

The Menu Bar on top disappears with the text in the Minibuffer saying, "Menu Bar mode disabled".

#+ATTR_ORG: :width 550px
[[file:images/menu-bar-off.png]]

If you call the same command again, the Menu Bar appears again ("Menu Bar mode enabled").

#+ATTR_ORG: :width 550px
[[file:images/menu-bar-on.png]]

Notice that you could have selected, in the Menu Bar : Options > Show/Hide > Menu Bar.

In Minibuffer, you can also just type "me ba mo" (or "bar mo men" the order doesn't matter) because the search is very versatile.
Then, you can select =menu-bar-mode= (using the arrow if it's not the first choice), and press =RET=. You can press "=TAB=" (tabulation) to complete the current candidate.

To cancel a command, like =M-x=, just press =ESC= (Escape) or C-g. You will see "Quit" displayed in the Minibuffer.

*** Introduction to "heading"
:PROPERTIES:
:ID:       86e3c4c8-398d-4cea-962d-a6e8aff17aef
:END:

Let's go edit something !

Split you frame in two windows (or create a new tab), and switch to the buffer "=*scratch*=". In this buffer, we will add a "=heading=" and some texts : A =heading= is use to structure some notes.
To create a heading, just type =*=, then press the space bar (space bar is ="SPC"=) and then type something to create a "heading".

Now, create a "subheading" : press "RET" two times, and type two time "*", then SPC, and then some text (like the first heading). You will see the size and the color of the text change to confirm that is a heading.

Then, add some normal text : press "RET" two times again, and type some text.

Now, click on the first heading, and press "TAB".

What did you do, everything just disappeared !

No worry, the subheading and text is just "hidden" : pressing "TAB"" on a heading cause the text (and subheading) under that heading to fold. This feature (folding) is very useful for managing large notes/documents by temporarily hiding parts you're not currently working on.

When using the folding feature, you can cycle through different visibility options for the content under a heading. For example, you can start with the text folded, then press TAB on a heading to view only the subheading, then press TAB again to view all the text, and then press TAB once more to fold the content back. This cycle can be repeated as needed. Thoroughly test it in the scratch buffer by creating new headings and subheadings to become more familiar with it.

You can also navigate to the Menu Bar in Emacs where the options for managing visibility within the "Org" are located. Why "Org" ? Because Emacs uses =packages= to provide various capabilities, and the "Org" package specifically caters to organizing and managing text in a structured manner, including this folding functionality.

#+ATTR_ORG: :width 250px
[[file:images/menu-bar-section-for-org.png]]

The Menu Bar Section of "Org" is not the exhaustive list of things you can do with Org (you can do a lot of things), but it is handy for a beginner. We will dive into it later.

As you maybe notice, you can fold this document (the Tutorial), because it use "Org" too.

Now that you are acquainted with cycling one heading, you can cycle all headings by pressing S-TAB on your keyboard. This will allow you to do the same cycle, but for all headings in the document. You can test it in for this tutorial.

*** Basic edition

To finish this introduction, you can use C-c to copy, C-x to cut, C-v to paste and C-z to undo. This operation are also available just under the Menu bar : the Tool Bar. The Tool Bar is just under the Menu bar, and looks like this (it's not exactly the same depending on Windows, Linux and Mac) :

[[file:images/tool-bar.png]]

The Tool Bar can help you to do some things in different place in Emacs.

Furthermore, you can of course select an area of text : just drag an area (called a "=region=" in Emacs) with your mouse. This operation to select an area of text is called "=mark=" (you are =marking= a =region=). You can click elsewhere (or use =ESC=) to remove the mark.

If you are looking for a way to select the whole text, try the Menu Bar, =Edit > Select All=. It's also assigned to =C-a=. Selecting the whole text you are looking at is done via the function called =mark-whole-buffer=.

#+ATTR_ORG: :width 250px
[[file:images/select-all.png]]

You just finished the tutorial of Emacs, bravo ! Take a pause.

** Tutorial / Menu
:PROPERTIES:
:ID:       5181a2a5-754a-49e9-bfbd-79eed5e8c6f3
:END:

While default keyboard shortcuts of Emacs are efficient and can speed up your workflow, frequently using specific combinations like "C-x t 2" can become cumbersome. To enhance your experience and simplify navigation, a menu interface is implemented.

When you open the menu, you will have something like this :

[[file:images/menu.png]]

To use the menu, just open it by pressing "F11", and then type the letter near the functionality/command, and the command associated with it will run.

This tutorial is structured like the menu. As you can see in the menu, on the left, you have a section "Submenus", and on the left, you have "Nodes". So, in this tutorial, you will have two main heading : Submenus and Nodes. 
For example, if you want information on "Open the graph of nodes in browser" under "Nodes" section, you can navigate to the "Nodes" heading in this tutorial, and then "Visualization of your graph" heading. =The menu and tutorial follow the same structure=.

Furthermore, there will be a lot of shortcuts in this section that will not (always) be in the menu (because sometimes, the default shortcut of Emacs/Org work perfectly) but don't forget :
=You also rely on the Menu Bar, the Org Submenu, or even M-x=.
To see all methods to call commands, you can have [[id:657dd016-284e-40ad-8591-4b3cac5f3cc7][a summary here]].

Finally, =you don't have to read this in a linear way.= Fold and jump to the part that interest you the most. The most important part (and the only part that you can use if you want) is find and create nodes.

*** Nodes
:PROPERTIES:
:ID:       c04015b6-7a0c-466b-aa05-6ec863f70b8b
:END:

This section is the most important part : taking notes and make some links between them.
Org focuses is a package to take notes.
Org-roam, another package, is a powerful tool for networked note-taking within Emacs.

**** Find, Insertion, and creation 
:PROPERTIES:
:ID:       c35e5626-d6e5-4123-ab7f-416e874dab8c
:END:

To find a node, just open the menu, and call "org-roam-node-find", and to insert a link, call "org-roam-node-insert".
As you can see, you can jump and insert to any section of this tutoriel, because all heading are actually… nodes.

The display of this two commands are very handy : you can search like if you search a command (so you can put some SPC), and you see with a hierarchical view. When searching for a node in the Minibuffer, you have a preview to the node currently selected (using the arrow keys up and down to change the selection).

If you complete the command "org-roam-node-insert" or "org-roam-node-find" with a node that doesn't exist, this will create a new node. You will have something like that :

[[file:images/capture-basic.png]]

Don't pay attention to the "Properties" drawer (and don't modify it) : it is just here because you are actually creating a node (see [[id:2167f081-9c49-4296-9b5a-f5fbfcebbec8][What is a "Node" ?]] for more information).

You can write what you want, and finish the creation by doing "C-c C-c".

To have your own template (a pre-designed format or layout that can be customized for specific use), you can view this : [[id:29254ea8-09b8-4456-98c8-690433b84bca][customize a variable : Org-roam templates]].

**** Backlinks
:PROPERTIES:
:ID:       7f2cdc0f-9688-47d2-87e8-a30769411f84
:END:

Backlinks in Org-roam are references from one note to another, showing where the current note is mentioned. 
In other words, backlinks answer at the question : Where is this note cited ?

They enable you to trace the context of how a note is referred to across your entire note database.

There is two primary commands to view and navigate backlinks :

***** The command consult-org-roam-backlinks
:PROPERTIES:
:ID:       81eec7f6-1510-4431-a63a-720fcaeacb23
:END:

When invoked, this command opens a minibuffer listing all the notes that contain links to the current note. You can navigate through this list to see the context in which your current note is referenced.

***** The command org-roam-buffer-toggle
:PROPERTIES:
:ID:       14f049c1-058f-42f0-86ab-0930b1bed960
:END:

This command toggles the "Org-roam side buffer" that displays backlinks to the current note among other metadata.

When you toggle this buffer, it appears typically on the right or left side of your Emacs window. It lists all backlinks with some context information to the current note, allowing you to quickly jump to any referring note just by clicking on it.

This is useful for exploring the relationships and context of the information.
**** Visualization of your graph
:PROPERTIES:
:ID:       2fe5c774-a8a1-4aa0-927a-af883d0d5099
:END:

Org-Roam-UI is an package for Org-Roam that provides a graphical view for navigating and visualizing your network of notes. It enhances the capabilities of Org-Roam by offering a more intuitive and interactive way to explore your notes and their connections.

***** Using the "org-roam-ui"
:PROPERTIES:
:ID:       81da555b-72c7-4649-b935-1b07d0ae0fbb
:END:

To access Org-Roam-UI, simply call the "org-roam-ui-open" command within Emacs. This command launches the Org-Roam-UI interface, displaying the interactive graph visualization of your notes network.

Once Org-Roam-UI is open, you can interact with the graph, explore your notes, and leverage its features to gain a deeper understanding of your knowledge base organized with Org-Roam.

***** Key Features of Org-Roam-UI 
:PROPERTIES:
:ORG-MODIFIED-SUPPRESS: t
:ID:       b9e36d95-f31e-48e2-b8db-0f79e79f8320
:END:

1. **Interactive Graph Visualization:** Org-Roam-UI presents your notes as nodes in a graph, with connections between them represented as edges. This graphical representation allows you to visually explore the relationships between your notes and quickly identify patterns and clusters.

2. **Node Information:** When you select a node in the graph, Org-Roam-UI displays information about the selected note, such as its title, tags, and backlinks. This contextual information provides valuable insights into the content and connections of the selected note.

3. **Search and Filtering:** Org-Roam-UI includes search and filtering capabilities that allow you to narrow down your view of the graph based on specific criteria, such as tags or keywords. This makes it easier to focus on relevant subsets of your notes and navigate your network more efficiently.

4. **Graph Navigation:** You can navigate through the graph using various navigation controls provided by Org-Roam-UI. These controls allow you to zoom in and out, pan across the graph, and reposition nodes to optimize your view.

**** Roam the graph
:PROPERTIES:
:ID:       2dc70d53-4013-4a6a-9d05-007d3ff197ca
:END:

You can roam easily using the command "eepim-org-roam-navigate" : this function ask you a node, and then offer a list of each link (and backlinks) of the current node.

When you want to finish the function, just select another time the node that you select previously.

**** Alias
:PROPERTIES:
:ID:       2b19164e-168f-4aa9-81b9-a304c3593057
:END:

Sometimes, you want to find a note by his title, but the node can also have another name.
To overcome this problem, the command "org-roam-alias-add" exists, which allows you to add an alias, and despite to be able to search for nodes with another name.

**** Deactivate the tutorial in nodes search
:PROPERTIES:
:ID:       10f82333-9c64-4b84-8cc4-60caac5e606c
:END:

If you wish to avoid being bothered by nodes from the Tutorial (indicated by "Tutorial:" on the left when searching for nodes), you can disable this feature by calling the command "eepim-switch-include-tutorial."

**** Go to back to the main tutorial

The command "open-main-tutorial" is here to return in this main tutorial.

*** Submenus
:PROPERTIES:
:ID:       ba5955f0-ee22-4739-b7ce-3e55448f658c
:END:

Not everything fits into one menu, thus the creation of submenus.
Each submenu has its specificities and utility.

**** Org Submenu
:PROPERTIES:
:ID:       bf709866-69d6-40a2-9183-5dbfb042e8bc
:END:

If a command is related to a specific Org mode functionality being searched for, it will be quickly found within this section.

The "Org Submenu" will gather the most useful commands, but  many of the command descriptions are clear enough to be used without further explanation.

***** Main things to know for taking notes in Org
:PROPERTIES:
:ID:       1dcb4c09-90a6-4768-bd77-3aed41b31363
:END:

****** All is plain text
:PROPERTIES:
:ID:       32247fbc-a78f-423f-af5f-fdf5be7c4728
:END:

Org mode in Emacs is designed around a simple yet powerful principle: plain text.

This plain text approach ensures that Org files are lightweight and editable with any text editor, not just within Emacs (even if it's better inside it).

This core concept is to enable to organize notes, maintain to-do lists, track tasks, and even write complex documents like books or academic papers, all within a simple, readable format that's easy to edit and maintain. This format uses straightforward, intuitive syntax to denote structure (like headings, lists, and links), metadata (like tags and properties), and formatting (like bold or italic text).

The text will be here, forever.

As wrote before, *all* =is= *text*. So, for example, if a command create a new heading, you can also write yourself "*" : it's the same, the command is just here to facility the interaction between you and Org.

******* Modern style
:PROPERTIES:
:ID:       43051f35-7c58-436c-915c-7474f9a257ce
:END:

By default, notes are only plain text, which is functional but may not visually highlight the structure or important elements of your notes effectively. 
If the variable "eepim-org-modern-mode" is set to "t", Emacs will add additional styling like font changes, color highlights, or other typographical enhancements that make the notes easier to read and navigate (but you will not always see the text).

The suggestion is to activate this variable when you are comfortable with Org-mode.

To activate this, just activate the variable "eepim-org-moderne-mode".

Before the activation :
[[file:images/org-modern-text.png]]

After the activation :
[[file:images/org-modern-activate.png]]

****** Heading
:PROPERTIES:
:ID:       d10a10b4-ab6f-44ab-b749-7bd977cd1bc3
:END:

In Org mode, headings are the building blocks of your documents. They help you organize your content hierarchically. A heading is a line of text that starts with one or more asterisks (*) . The number of asterisks determines the level of the heading:

- One asterisk (*) represents a top-level heading.
- Two asterisks (**) represent a second-level heading (subheading).
- Three asterisks (***) represent a third-level heading, and so on.

M-RET (org-meta-return) is used to quickly insert a new heading or list item directly below the current line, depending on the context:
- In a heading context: When the cursor is at a heading, M-RET will insert a new heading of the same level immediately after the current heading. This is useful for expanding sections or adding new topics to your document without disrupting your workflow.
- In a list context: If the cursor is at a list item, pressing M-RET will create a new list item at the same level as the current one. This makes it very convenient to extend lists without having to manually format each new item.

Furthermore, when you call the command "org-meta-return", depending of the variable "eepim-create-node-every-heading", a node will be instantly created.

[[info:org#Headlines][More information in the manual]].

****** List
:PROPERTIES:
:ID:       6581526c-2c82-46cc-8f80-b32f264ff350
:END:

List are very easy to create. To simplify, just but "1." or "-", and do the command "org-meta-return" to create new item.

You can do several operation on list, like cycle between "1." and "-", or why not sort the list ?

The command "org-toggle-heading" is very handy to switch between list and heading (don't forget to select the text that you want modify before).

[[info:org#Plain Lists][The manual is very well documented for more explanation]].

****** Visibility
:PROPERTIES:
:ID:       8f7848de-eed2-4c3b-b55d-f810ab75eec0
:END:

One essential navigation command is pressing the TAB key. When you press TAB, it cycles through different levels of visibility or "folding" in the document.

TAB (org-cycle) cycles the visibility of headings and content in Org mode. When you press TAB at a heading, it toggles between showing and hiding the content under that heading. If the heading is collapsed, pressing TAB will expand it to show its direct children. Pressing TAB again will expand it further to show all sub-content recursively or collapse it back.

Shift-TAB (org-shifttab) cycles the visibility of all headings and content in the document. It's useful for quickly expanding or collapsing all sections of your document. The cycling usually goes through states where all headings are shown but content is hidden, all content under headings is shown, and finally, all content is collapsed.

See also [[info:org#Global and local cycling][Global and local cycling in the manual]].

****** Operation on Headings
:PROPERTIES:
:ID:       3ee25a04-a151-4630-9701-759f0f3297c3
:END:

You can move headings up and down within the document.

M-up/down (org-metaup/org-metadown) allow you to move the entire subtree (the current heading and all its children) up or down, respectively. It's a quick way to reorder sections or tasks within your Org document without having to cut and paste.

You can also promote or demote headings to change their level.

M-left/right (org-metaleft/org-metaright) will promote/demote the current heading. Conversely, pressing Alt + Right will demote the current heading, increasing its depth and making it a lower-level heading. This affects the hierarchy of your document's structure.

If you want to promode/demote the heading and all his child, you can us M-Shift-left/right.

[[info:org#Structure Editing][View in the manual]] for more details.

****** Emphasis
:PROPERTIES:
:ID:       0f9c1f9f-9117-4f25-b0d2-0c97d2c88452
:END:

To keep notes, there is some markup to make things stand out a bit more visual. You can use the following markup:

#+begin_example

You can make words *bold*, /italic/, _underlined_, =code=, ~verbatim~, and, if you must, +strike-through+.

#+end_example

The render will be like this:

*Bold*, /italic/, _underlined_, =code=, ~verbatim~, and, +strike-through+.

You can use the one you want, for whatever you want !

More information in the [[info:org#Emphasis and Monospace][manual]].

***** Links
:PROPERTIES:
:ID:       e32a64bb-1149-4157-96fb-d0fa3e6d7a2f
:END:

Check the section [[id:ed45b6d1-9ac1-4766-9a7c-e92c5193ac5a][What is a link ?]] before if you want more information to better understand this section.

In Org mode, links are the way to connect your notes to other sections of your document, external files, websites, and even other Org mode documents. There is two primary commands to do this : =org-insert-link= and =org-store-link=.

As explain before in the section [[id:c35e5626-d6e5-4123-ab7f-416e874dab8c][Find, Insertion, and creation of nodes]], you can insert a link to another node : the command "org-roam-node-insert" is a sort of shortcut to the command  org-insert-link, that is more general.

You can, everywhere and in (almost) every document (even if you are in the manual of Emacs) store a "link" with the command "org-store-link".

When you store a link, you will see something like this in the Minibuffer :

[[file:images/org-store-link-result.png]]

This will permit you to insert the link (or any type of link) with the command "org-insert-link" :

[[file:images/org-insert-link-type.png]]

Stored links are located at the top. To add a URL link, just paste the URL here. You can also choose the type of link you want, which will prompt you to specify the destination of the link.

One important type of link is the "file:" type link, which allows you to link to any document on your computer. When selecting the "file:" type and pressing RET, you will be prompted to enter the path to your file, starting from the Download directory. For a more advanced usage of the system, consider using a new file system with Org detailed in this section : [[id:eca94245-8e35-4eed-ab27-b626c7ce702e][Attach documents]].

After selecting the link type and destination, you will be prompted to provide a "description" for the link. This description will be displayed as the link text in your notes. To view the complete links, use the "org-toggle-link-display" command.

***** Todo
:PROPERTIES:
:ID:       e5726e13-d41f-49c7-833e-596aad71fdc0
:END:

A main feature in Org-mode is his capability to organise the task. TODO entries in Org mode are used to track tasks within your documents, allowing you to easily see what needs to be done, what is in progress, and what has been completed.

[[info:org#TODO Items][Page in the manual]]

****** Create Task
:PROPERTIES:
:ID:       605ba67e-dbec-47f0-807a-79250be17dca
:END:

In Org mode, to create a "TODO entries", you just have to add "TODO" in the beginning of a headlines (just after the "* "). The command "org-todo" simplify this by doing this. To mark a heading as "DONE", just replace "TODO" with "DONE", org recall the command "org-todo"

You can also use Shift-left/right to cycle between the state !

To have a view of all your todo in the same interface, consult the [[id:d2e439fe-4717-4b21-8215-9bf835894cd0][org-agenda]] section.

****** Create subtask
:PROPERTIES:
:ID:       7b1cbe53-9c88-4f93-bd16-6b9d8f52484a
:END:

To create some subtasks, you just have to create some subheading, and add TODO to this.

#+begin_example

# * TODO Plan vacation
# ** TODO Book flights
# ** DONE Reserve accommodation
# ** TODO Pack suitcase

#+end_example

***** Timestamp
:PROPERTIES:
:ID: 6744a9d3-5b25-4bea-9ac2-68d16fe1ec19
:END:

A "timestamp" is a date in your notes or headings used to mark events that will appear in your agenda view. They typically look like this:
<2023-09-15 Fri 16:00>.

To assist you with inserting timestamps, Org mode provides a practical interface. Additionally, there are different types of timestamps.

To view have a view of timestamp, check the section of the [[id:d2e439fe-4717-4b21-8215-9bf835894cd0][agenda]].

****** Interface for Timestamps

When prompted for a date/time in Org mode (such as using the command "org-time-stamp"), the default format shown is usually the current date and time. However, the system accepts a variety of formats and automatically adjusts any unspecified elements based on existing defaults or context-specific cues. For example, if only the day is entered and it has already passed in the current month, Org mode assumes a future date.

Here’s how Org mode interprets various inputs:

- Numeric date formats (e.g., ‘3-2-5’ or ‘2/5/3’) are processed as specific dates.
- Simple numeric inputs like ‘14’ adjust to the next occurrence of that date within the current month and year.
- Abbreviations of weekdays (e.g., ‘Fri’) target the next occurrence of that weekday.
- Specifying only a month and day (e.g., ‘sep 15’) assumes the next occurrence of that date in the future.
- Inputs with specified times (e.g., ‘12:45’) include the exact time on the current day. Time ranges can be specified using "-" between two times. To indicate a range spanning different days, use "--" after the call of the first timestamp, then recall the command "org-time-stamp".

Org mode also supports relative dates with prefixes like ‘+’ or ‘-’ followed by a number and a time unit indicator (hours, days, weeks, etc.), allowing for precise temporal adjustments. For example, "+2m" adds two months to the current node/heading.

****** Types of Timestamps

Timestamps can be categorized into three main types, each serving a specific function:

1. Normal Timestamps: Created with the command "org-time-stamp", these are used to mark regular appointments. Typically, appointments do not have a "TODO" state but can be tagged as such if needed.

2. Scheduled Timestamps: Added with the command "org-schedule", these timestamps include a "SCHEDULED" prefix followed by a date (e.g., SCHEDULED: <2023-09-25 Mon>). They mark the date when a task should start, and the task will remain active until marked as "DONE".

3. Deadline Timestamps: Created with the command "org-deadline", these indicate the latest date by which a task should be completed. They are typically denoted with a "DEADLINE" prefix followed by a timestamp (e.g., DEADLINE: <2023-09-25 Mon>).

You can combine all types of timestamps within each node or heading as needed.

****** More information

For more detailed information on how to use these timestamps and to understand their syntax and additional options, refer to the [[info
#Dates and Times][Dates and Times]] section of the manual.

***** Tags
:PROPERTIES:
:ID:       51bb78ff-fb9f-4ae0-be05-f6dc3e305e33
:END:

Tags are a fundamental feature in Org mode : they can be used to filter and search through your documents quickly, making it easier to manage large amounts of information.

In Org mode, tags are keywords attached to headlines. Tags are typically displayed at the end of a headline, enclosed in colons, like :thisIsTag:. You can write this yourself, or call the command "org-set-tags-command" to add tag easier.

Consult the [[id:d2e439fe-4717-4b21-8215-9bf835894cd0][agenda section]] to consult all your tag.

[[info:org#Tags][Page in the manual]]

***** Attach documents
:PROPERTIES:
:ID:       eca94245-8e35-4eed-ab27-b626c7ce702e
:END:

Attaching documents to a heading in Org mode is a practical way to manage and link related files directly within your notes or tasks. The file can be images, directory, pdf, etc.

If you do that (and if the heading has not already a ID), the heading will have a unique ID to organize the file attached.

This capability is particularly useful for keeping all relevant resources close to their respective topics or tasks. This method, with the connected knowledge network, can replace your classic hierarchical file-system !

****** Attaching something
:PROPERTIES:
:ID:       f89c8feb-a0bf-42cf-91d1-0c99f4daf5c2
:END:

To attach a file, you can follow this step :

1. Navigate to a Heading: Move your cursor to the heading where you want to attach a file.
2. Attach a File: call the command "org-attach" to initiate attachment options. Here is a lot of option, but the best are "c" for "copy" and "m" for move the file.
   [[file:images/org-attach.png]]
3. This will open a file dialogue or prompt you to enter the path of the file you wish to attach (by default, the directory is the "Download" directory).
   [[file:images/attach-file.png]]
4. Select the File: Navigate to the file you want to attach and select it by pressing RET. Org mode will attach this file to the heading, creating the tag "ATTACH" in the same time

****** Managing attachments
:PROPERTIES:
:ID:       c1ecbaaa-9c69-4de2-8e91-5602604c663b
:END:

Here’s how to handle common tasks related to attachments.

******* Open attachment
:PROPERTIES:
:ID:       b7c00776-bd41-4afc-ac0e-4e72b612cdf5
:END:

To open attachment, just call the command "org-attach-open" : this will display a list of attached files.

Use the arrow keys to navigate to the file you wish to open and press RET to open.

Org mode will open the selected file using the default application associated with its file type.

******* See all attachment
:PROPERTIES:
:ID:       f3fcb504-c314-4d29-8ba9-7df5741e93e9
:END:

To see all attachments, call the command "org-attach-reveal" : this opens the directory attached directory associated with the heading, where all attachments for the current heading are stored.

This is particularly useful when you want to manage files using your system’s file manager or check the contents of the attachment directory.

******* Insert attachment in notes as a link
:PROPERTIES:
:ID:       9646784b-59f0-4462-9b21-be1c1b387e18
:END:

You can have some link directly in your notes to visit your attachments.

To do this, place your cursor where you want to insert the link in your Org document, then call the command "org-insert-link", and select the "attachment:": A list of attached files will appear. Use the arrow keys to select the file you want to link to and press RET.
Finally,  enter a description for the link.

******* Open in external application
:PROPERTIES:
:ID:       e0b4d2c9-7460-4d9c-96d0-a50e393ffa5f
:END:

When you open attachment, you want maybe not be inside Emacs. To do that, just use the command "xah-open-in-external-app".

***** Agenda and views
:PROPERTIES:
:ID:       d2e439fe-4717-4b21-8215-9bf835894cd0
:END:

Org-agenda is part of the Org mode package in Emacs. It can compile several views from all your Org files into a single buffer, helping you track TODOs, schedules and deadlines tasks, tags, and more.

This is not only a "Agenda", because it can be used for many other things.

Use the command "org-agenda" to open the main menu of org-agenda.

[[file:images/org-agenda-menu.png]]

The main features are :
- a : shows timestamps, scheduled, and deadline for the current week.
  You can use f (forward) and b (backward) to navigate through time in your agenda. Furthermore, press d to see the agenda just for a day, and w to return to the week view.
- t : if you want to know all your TODO, just click here.
- m : search for some tags

After selecting the option that you want, you put your cursor on a heading (in the agenda view) and press TAB (to move to the heading and keep open the buffer Org-agenda) or RET (to move to the heading and hide the buffer Org-agenda) to directly jump in the right place !

To have all options possible inside the org-agenda, press "v" inside the org-agenda buffer.

****** Managing heading within Org-agenda
:PROPERTIES:
:ID:       3281bdad-6837-4d83-983f-a00d119cd579
:END:

When in Org-agenda buffer, you can use "t" to cycle through TODO states (e.g., TODO -> DONE).
To schedule a task, press "s" to schedule a date. The same for set a deadline but with "d".

****** Filtering
:PROPERTIES:
:ID:       0eab48c0-6f27-46fe-b606-e767f90c0b8e
:END:

You can filtering with a tag, expression, or even more.

To have even more method to filter, you can check the [[info:org#Filtering/limiting agenda items][manual]].

***** Agenda in browser
:PROPERTIES:
:ID:       584fe945-7950-4cca-a021-c2053f6226ab
:END:

Org-agenda is a handy way of managing tasks directly in Emacs.

But for better visualization, nothing beats a “google-agenda” view. For this, the command "org-hyperscheduler-open" is available.

***** Capture
:PROPERTIES:
:ID:       008eb91e-d58c-41eb-8027-e2e5b0e8a1d5
:END:

Work in progress.

***** Exportation
:PROPERTIES:
:ID:       6fa2d772-2a1f-4b8d-8d3a-035eaa82a9ad
:END:

To export the current node to a different format (like txt, html or Latex), call the command "org-export-dispatch".
Then, select the export format you want with the shortcut.

[[file:images/org-export-dispatch.png]]

You have other option on the top that you can modify to adjust the scope of you exportation.

All the exported document will be in this directory : [[file:../../data/export/][.emacs.d/PIM/data/export]].

You can change this directory with the variable "eepim-org-export-output-dir".

***** Toggle a heading into a node
:PROPERTIES:
:ID:       128fb1e4-74f8-4550-a52e-cc547314a3a8
:END:

The command "eepim-toggle-roam-node" help you to toggle a heading into a node, and vice versa.

***** Org manual
:PROPERTIES:
:ID:       c93d8264-bb9b-4c80-b7a6-6500a36510ae
:END:

The org-info command in Emacs Org mode is a convenient way to access Org mode manual directly within Emacs. This manual provides detailed information on all aspects of Org mode, from basic usage to advanced features.

To open the manual, call the command org-info (in the "Misc" section of the submenu of Org mode).

You can navigate with the mouse, but press "i" to initiate a search is often quicker.

For example, call "org-info", press "i", and search "timestamps". This will direct you to the section of the manual that discusses how to use timestamps in your Org documents.

To move through the sections of the manual, you can press "n" (for next), "p" (for previous), "m" to go inside a subsection, and "u" for the upper section. 

**** Windows/Buffer/File Management
:PROPERTIES:
:ID:       a2128e91-c137-40a5-afba-394dc17b21b0
:END:

This submenu is useful to organise the disposition of document in Emacs

***** Frame and Windows
:PROPERTIES:
:ID:       8cbf3d91-746b-4542-aa5b-5258d6f799b8
:END:

- Splitting Windows: You can split the current window into two, either horizontally (split-window-below) or vertically (split-window-right). This allows you to view and edit multiple buffers side-by-side within the same frame.

- Deleting Windows: You can close the current window (delete-window) or all other windows except the current one (delete-other-windows), helping to clean up your workspace.

- Frame Management: Similar to window management, but at the frame level — creating a new frame (make-frame) or closing the current frame (delete-frame).

- Layout Undo/Redo: With winner-undo and winner-redo, you can undo or redo changes to the arrangement of windows, allowing you to revert to previous layouts if you mistakenly change something.

***** Buffer/File
:PROPERTIES:
:ID:       3cbbf739-a150-469b-a136-06735a9b4704
:END:

A buffer in Emacs is a region of text that has been read into Emacs's memory, which could be part of a file, a document, a process output, etc.

- Open outside Emacs : Emacs can open a lot of different document, like pdf or png file. This function open the current thing to the external application.

- Switching Buffers: The switch-to-buffer command allows you to switch your current window to display a different buffer, effectively changing what you're working on without altering the window layout.

- Refreshing Buffers: revert-buffer reloads the current buffer from its file on disk. This is useful if the file has been changed outside of Emacs, allowing you to update Emacs's buffer to match the file's current contents.

- Killing Buffers: The kill-buffer command closes the current buffer. If the buffer has unsaved changes, Emacs will prompt you to save those changes before closing.

- Save buffer/file : The save-buffer command save the current buffer to the corresponding file. Each buffer is saved every 10 seconds by default (see the variable "eepim-auto-save" and "auto-save-visited-interval").

- Open file : find-file is for open a file with Emacs "manually".

***** Bookmark Management
:PROPERTIES:
:ID:       8a4b729c-e866-4de8-a15d-8b1937c4bdbd
:END:

Bookmarks in Emacs are pointers to locations in files, making it easy to return to specific places without remembering exact file names or line numbers.

- Setting Bookmarks: The bookmark-set command allows you to create a bookmark at your current location in a file, which you can return to later with bookmark-jump.

- Bookmark Window Layouts: With bookmark-view-save, you can save the current arrangement of windows and buffers as a bookmark, enabling you to restore that exact layout at a later time. To restore it, just use the command "bookmark-jump" 

- Jumping to Bookmarks: bookmark-jump moves your cursor to the location of a previously set bookmark, facilitating easy navigation across complex projects or documents.

**** Basic Movement and Edition
:PROPERTIES:
:ID:       9af5eb0e-53ca-411f-972d-231f27f305df
:END:

This menu is quite clear and doesn't require any additional explanations or points.

It's there to facilitate the movement and editing of Emacs.

Most tools are available in the Menu Bar. 

**** Help and Customisation
:PROPERTIES:
:ID:       4b7f647e-abeb-4d5f-8b57-d82f6527a0ee
:END:

This section is useful to better understand Emacs and to customize it.

***** Customisation of variable
:PROPERTIES:
:ID:       f54191fa-cb6d-4eaf-8a8b-f99a0f261892
:END:

This section is very important : this is here were you will have the most customisation.

- Customize Variable: Opens an interface (see [[id:548f8706-0be0-4ba3-b051-4d660fb802da][here]] to understand how to use this interface) for changing the value of a variable, with changes that can be saved permanently.
- Customize Group: Allows you to modify settings related to a group of related options (with the same interface of "Customize Variable"), making it easier to configure aspects of Emacs related to a particular feature.
  To customize all the variable relative to the configuration, you can customize the group "eepim". That can be the configuration of the margin, text size or useful other little things.

To have more information how to customize Emacs, you can check [[id:d576171c-80e8-4fa4-95a0-266990051a6d][another node in the tutorial]].

***** Help
:PROPERTIES:
:ID:       5996a48e-7e6e-4612-b935-a32531701f97
:END:

This section provides quick access to tools for understanding and using various Emacs features:

- Describe Function: Allows you to enter a function's name to get detailed information about what the function does and how to use it.
- Describe Variable: Useful for finding out details about configuration options (variables), including their current values and documentation.
- Describe Key: Tells you what a specific key combination does in Emacs.

***** Documentation
:PROPERTIES:
:ID:       43183205-5b8e-418f-8013-c54d7ab1b54c
:END:

This section is geared towards accessing general and specific documentation:

- Info (info): Opens the Info viewer, which contains detailed documentation for Emacs and many packages. When you are in the manual, you can search with "m", "q" to quit, "h" for help command.
- View all Messages (view-echo-area-messages): Displays all the messages that have appeared in the echo area, useful for reviewing past notifications.

**** Execute a command with name
:PROPERTIES:
:ID:       08b90cc0-032e-47f4-be51-d0efa07c430b
:END:

This is exactly like M-x, but placed in the menu to be more convenient.

** Find more information
:PROPERTIES:
:ID:       474953a0-4688-42e6-a084-ebe5f65704c8
:END:

- browse the built-in tutorial that will familiar things for you
- browse the manual info-emacs-manual 
- do the command "org-info" and explore org-mode !
- 
- online
  - reddit
  - chatgpt

** To go further
:PROPERTIES:
:ID:       da3e220d-444c-4df0-98bf-2082ce497d0f
:END:

*** Explanation of different note-taking methods possible (and comparison with the book 
:PROPERTIES:
:ID:       359b717e-9df7-4913-aa4a-cb56a80ef688
:END:

Now that you know how to create notes and links them together, I will explain how to take notes with a go

**** Zettelkasten
:PROPERTIES:
:ID:       d00fb8e6-2985-4c21-8b61-5bbff0623d0a
:END:

**** Other
:PROPERTIES:
:ID:       fc66e8ad-753c-4685-8442-aafb86354c3b
:END:

**** Para
:PROPERTIES:
:ID:       95a33142-74e3-4c93-aa9d-f7865c22e461
:END:


*** Synchronisation between devices
:PROPERTIES:
:ID:       76f3af94-c957-49c3-94f7-b83ff8b67ea9
:END:

Synchronizing your Org mode files between multiple devices allows you to access and manage your notes and tasks seamlessly across different platforms. One popular method for achieving this is using Syncthing, a decentralized file synchronization tool. Here's how to set it up (help you with the other tutorial online) :

- Installing Syncthing: Begin by installing Syncthing on all the devices you want to synchronize. Syncthing is available for various operating systems, including Windows, macOS, and Linux. You can download the installer from the official Syncthing website and follow the installation instructions provided.
- Setting up Syncthing: Once Syncthing is installed, launch it on each device. You'll need to set up a Syncthing cluster by adding the other devices to your cluster.
- Configuring Folders: In Syncthing, you'll need to define which folders you want to synchronize between devices : synchronise your .emacs.d ! Syncthing will ensure that any changes made to files in these folders are automatically synchronized across all devices in the cluster.
- Ensuring Consistency: To avoid conflicts and ensure consistency, it's essential to follow best practices when working with synchronized files. Avoid editing the same file on multiple devices simultaneously, as this can lead to conflicts. Instead, wait for changes to be synchronized before making further edits.

By using Syncthing to synchronize your Org mode files between devices, you can maintain a consistent and up-to-date repository of notes, tasks, and documents across all your devices. This ensures that you have access to your Org mode workflow wherever you go, whether you're using Emacs on your desktop, laptop, or mobile device.

*** Phone Case (Incomplete)
:PROPERTIES:
:ID:       563855f8-a7a9-40ff-94a8-a50aa4d51b8f
:END:

Unfortunately, implementing the phone case feature is too complicated for beginners. I will create a tutorial for phone usage later because it's genuinely too complex. This involves using Termux, a terminal emulator for Android, which may not be familiar to everyone. Additionally, there are various technical challenges and considerations involved. Due to these complexities, it's best to defer this topic for a later, more advanced tutorial.

In the meantime, you can use Orgzly to access your agenda on your phone (if you have [[id:76f3af94-c957-49c3-94f7-b83ff8b67ea9][synchronise your files between devices]]). However, it's important to note that Orgzly does not currently support following Org-Roam links (see this [[https://github.com/orgzly-revived/orgzly-android-revived/issues/174][issue on github]] to know when that will work). While Orgzly provides a convenient way to view and manage your Org mode files on mobile devices, including tasks, notes, and appointments, its functionality is limited in this regard. You may still benefit from using Orgzly to stay organized and keep track of your schedule, but for accessing Org-Roam links, you will need to wait or to use termux.


*** Create your own configuration
:PROPERTIES:
:ID:       fe2adaa4-dd51-4987-a6a8-d0b58dd2a4c9
:END:

Now that you've grasped the essential functionalities and how they can be integrated into your workflow, you can even create your own Emacs environment.

You can begin by copying the relevant code snippets from this tutorial directly into your emacs.d/init.el file. This approach allows you to build a customized setup that specifically meets your needs, independent of any pre-configured systems. Feel free to experiment with the settings and adjust them as you explore more of what Emacs has to offer, making your experience truly your own.
