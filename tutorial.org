#+title: Tutorial
#+STARTUP: showall

The aim of this tutorial is to get you started as soon as possible with this "PKM", which stands for "personal knowledge management" : make some "nodes" to create  a personal knowledge graph that you will use all your life !

For the moment, just read the text and go down with the mouse. But if it's not your first time here and for going deeper, go here.

For a first-time user, the advise is to go as far as creating a node and inserting links. That's really the basics, and you don't necessarily need the rest if you don't want more.

** The basics 

You're using a program called "Emacs". It has a number of extensions, including "org-mode" (for efficient note-taking).

** Do some command !

*** Understanding Commands

In Emacs, the software that you use now, everything is a "command." A command is a piece of code that allows you to interact with Emacs and perform various actions. These actions can range from simple tasks like moving the cursor or inserting text to complex operations like searching and replacing text, running programs, or interacting with external services.

*** Accessing Commands

There are four main ways to access commands in Emacs:

1. *Using the Provided Menu*: I've implemented a menu (accessible with "ESCAPE" by default) for you with the main useful commands. You can access this menu to quickly find and execute commands without remembering their keybindings or names.

2. *Using "M-x" (Meta + x)*: Pressing "M-x" (where Meta is usually the Alt key) opens the "M-x" prompt. Here, you can type the name of the command (you can complete a command name with "TAB", and move with the arrow to chose the command) you want to execute and press Enter to run it. This method is particularly useful when you know the name of the command but not its keybinding. The completion system is flexible : you can type "to ba" to find "tool-bar-mode" for example.

3. *Using the Menu at the Top*: Emacs has a menu bar at the top of the window, similar to other graphical applications. You can use this menu bar to find and execute commands by navigating through the menus and submenus.

4. *Using Keyboard Shortcuts*: Emacs is known for its extensive use of keyboard shortcuts, also known as keybindings. You can execute commands by pressing the appropriate key sequence, often consisting of a combination of modifier keys (such as Ctrl or Meta) and regular keys.

So when I it's written "call the command X", it means you have these 4 ways to call the command : Choose the one you like best !

*** Stop a command

To stop a command during his process, press Control + G, e.g. to quit the menu (which will be your main point of entry into PKM), which we'll see shortly.

** Menu
:PROPERTIES:
:ID:       581343cc-d38c-4d31-ba23-d74311ba7f3c
:END:

I've implemented a menu for the main commands that are useful.

By default, the menu is bound to the key "escape" : try to open the menu ! Do you remembrer how to quit the menu without call a command ? (Do "C-g" !).

To call a command, just type the character near to the description that you want to do.

** Understanding Headings and Subheadings in Org Mode

In Org mode, headings are the building blocks of your documents. They help you organize your content hierarchically. A heading is a line of text that starts with one or more asterisks (*) . The number of asterisks determines the level of the heading:

- One asterisk (*) represents a top-level heading.
- Two asterisks (**) represent a second-level heading (subheading).
- Three asterisks (***) represent a third-level heading, and so on.

*** Navigate easily

One essential navigation command is pressing the TAB key. When you press TAB, it cycles through different levels of visibility or "folding" in the document.

Try to be on a heading and type TAB to cycle !

*** Create heading

To create a heading, simply type an asterisk (*) followed by a space and the title of your heading.

You can also do the commande "org-meta-return".

*** Moving Headings

You can move headings up and down within the document:

- M-up moves the current heading and its subtree up.
- M-down moves the current heading and its subtree down.

*** Increasing and Decreasing Heading Levels

You can promote or demote headings to change their level:

- M-left demotes the current heading, making it a subheading of the previous heading.
- M-right promotes the current heading, making it a sibling of the previous heading.

** Understand nodes

Now that you now create some notes, it's important to link this notes together. We will see how to create a "node", that is define as an entry point in your PKM.

** Searching and inserting 

*** Searching node

To search a node, call the command "org-roam-node-find".
To insert a node in anothe node, call the command "org-roam-node-insert".

*** Searching text

To search through the text of the current node, call "consult-grep".
To search through the whole PKM, call "consult-org-roam-file-find".

** Explanation of different note-taking methods possible (and comparison with the book 

Now that you know how to create notes and links them together, I will explain how to take notes with a go

*** Zettelkasten

*** Other

*** Para

** Graphical user interface

Org-Roam-UI is an extension for Org-Roam that provides a graphical user interface (UI) for navigating and visualizing your network of notes. It enhances the capabilities of Org-Roam by offering a more intuitive and interactive way to explore your notes and their connections.

*** Using the "org-roam-ui"

To access Org-Roam-UI, simply call the "org-roam-ui" command within Emacs. This command launches the Org-Roam-UI interface, displaying the interactive graph visualization of your notes network.

Once Org-Roam-UI is open, you can interact with the graph, explore your notes, and leverage its features to gain a deeper understanding of your knowledge base organized with Org-Roam.

Org-Roam-UI enhances the usability and accessibility of Org-Roam by providing a graphical interface that simplifies navigation and visualization of your interconnected notes network. It's a valuable tool for knowledge management and research in Emacs.

*** Key Features of Org-Roam-UI 

1. **Interactive Graph Visualization:** Org-Roam-UI presents your notes as nodes in a graph, with connections between them represented as edges. This graphical representation allows you to visually explore the relationships between your notes and quickly identify patterns and clusters.

2. **Node Information:** When you select a node in the graph, Org-Roam-UI displays information about the selected note, such as its title, tags, and backlinks. This contextual information provides valuable insights into the content and connections of the selected note.

3. **Search and Filtering:** Org-Roam-UI includes search and filtering capabilities that allow you to narrow down your view of the graph based on specific criteria, such as tags or keywords. This makes it easier to focus on relevant subsets of your notes and navigate your network more efficiently.

4. **Graph Navigation:** You can navigate through the graph using various navigation controls provided by Org-Roam-UI. These controls allow you to zoom in and out, pan across the graph, and reposition nodes to optimize your view.

** Setting up tasks

Org mode is a versatile tool in Emacs that allows you to manage tasks, projects, and notes efficiently. Tasks in Org mode are typically represented as headings within an outline structure. Headings serve as containers for tasks and provide a hierarchical organization that helps you manage your tasks effectively.

*** Creating Task

To create a task in Org mode, you start by creating a heading. A heading is denoted by asterisks (*) at the beginning of a line, followed by the title of the heading. The number of asterisks indicates the level of the heading. For example:

#+begin_example

# * TODO Buy groceries

#+end_example

In this example, TODO is a keyword indicating that this is an unfinished task. Buy groceries is the title of the task.
To activate a heading as a todo, you can write TODO before the title of the heading, or call the commande "org-todo".

*** Finish a task

Just replace "TODO" with "DONE", or call org-todo !

*** Concrete example with subtask

#+begin_example

# * TODO Plan vacation
# ** TODO Book flights
# ** DONE Reserve accommodation
# ** TODO Pack suitcase

#+end_example

In this example, Plan vacation is the parent task, and Book flights, Reserve accommodation, and Pack suitcase are its subtasks.

*** Add schedule and deadlin to task

*** Setting up the agenda

Call the command org-agenda. Then, do "a".

** Setting up captures

** Setting up exportation

To export, call the command "org-export-dispatch".
All the exported document while be in the directory .emacs.d/PKM/data/export.
[[file:PKM/data/export/][Click here]] to go in this directory.

** Setting up org-attach (with proper UUID generation)


** Synchronise between devices
:PROPERTIES:
:ID:       76f3af94-c957-49c3-94f7-b83ff8b67ea9
:END:

Synchronizing your Org mode files between multiple devices allows you to access and manage your notes and tasks seamlessly across different platforms. One popular method for achieving this is using Syncthing, a decentralized file synchronization tool. Here's how to set it up (help you with the othen tutorial online) :

- Installing Syncthing: Begin by installing Syncthing on all the devices you want to synchronize. Syncthing is available for various operating systems, including Windows, macOS, and Linux. You can download the installer from the official Syncthing website and follow the installation instructions provided.
- Setting up Syncthing: Once Syncthing is installed, launch it on each device. You'll need to set up a Syncthing cluster by adding the other devices to your cluster.
- Configuring Folders: In Syncthing, you'll need to define which folders you want to synchronize between devices : synchronise your .emacs.d ! Syncthing will ensure that any changes made to files in these folders are automatically synchronized across all devices in the cluster.
- Ensuring Consistency: To avoid conflicts and ensure consistency, it's essential to follow best practices when working with synchronized files. Avoid editing the same file on multiple devices simultaneously, as this can lead to conflicts. Instead, wait for changes to be synchronized before making further edits.

By using Syncthing to synchronize your Org mode files between devices, you can maintain a consistent and up-to-date repository of notes, tasks, and documents across all your devices. This ensures that you have access to your Org mode workflow wherever you go, whether you're using Emacs on your desktop, laptop, or mobile device.

** Phone Case (Incomplete)

Unfortunately, implementing the phone case feature is too complicated for beginners. I will create a tutorial for phone usage later because it's genuinely too complex. This involves using Termux, a terminal emulator for Android, which may not be familiar to everyone. Additionally, there are various technical challenges and considerations involved. Due to these complexities, it's best to defer this topic for a later, more advanced tutorial.

In the meantime, you can use Orgzly to access your agenda on your phone (if you have [[id:76f3af94-c957-49c3-94f7-b83ff8b67ea9][synchronise your files between devices]]). However, it's important to note that Orgzly does not currently support following Org-Roam links (see this [[https://github.com/orgzly-revived/orgzly-android-revived/issues/174][issue on github]] to know when that will work). While Orgzly provides a convenient way to view and manage your Org mode files on mobile devices, including tasks, notes, and appointments, its functionality is limited in this regard. You may still benefit from using Orgzly to stay organized and keep track of your schedule, but for accessing Org-Roam links, you will need to wait or to use termux.

** Conclusion

You can now :
- 
  
